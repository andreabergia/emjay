program = { SOI ~ functionDeclaration+ ~ EOI }

functionDeclaration = { "fn" ~ identifier ~ "(" ~ ")" ~ block }

block = { "{" ~ (statement | block)* ~ "}" }

statement = _{ (letStatement | assignmentStatement | returnStatement) ~ ";" }

letStatement = { "let" ~ identifier ~ "=" ~ expression }

assignmentStatement = { identifier ~ "=" ~ expression }

returnStatement = { "return" ~ expression }

expression = { prefix? ~ factor ~ (infix ~ prefix? ~ factor )* }
      infix    =  _{ add | sub | mul | div | pow | rem }
        add    =   { "+" } // Addition
        sub    =   { "-" } // Subtraction
        mul    =   { "*" } // Multiplication
        div    =   { "/" } // Division
        pow    =   { "^" } // Exponentiation
        rem    =   { "%" } // Remainder
      prefix   =  _{ neg }
        neg    =   { "-" } // Negation
      factor   =  _{ number | "(" ~ expression ~ ")" | functionCall | identifier }
  functionCall =   { identifier ~ "(" ~ ")" }

number = @{"-"? ~ (hexNumber | decimalNumber)}

decimalNumber = @{
    ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

hexNumber = @{ "0" ~ "x" ~ ASCII_HEX_DIGIT+ }

identifier = @{ XID_START ~ XID_CONTINUE* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
